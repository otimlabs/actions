name: Base PR Workflow

on:
  workflow_call:
    secrets:
      SLACK_BOT_TOKEN:
        required: true
        description: "Slack bot token for sending notifications"
      SLACK_GITHUB_LOGS_CHANNEL_ID:
        required: true
        description: "The Slack channel ID to send notifications to"
      GH_APP_ID:
        required: true
        description: "GitHub App ID for authentication"
      GH_APP_PRIVATE_KEY:
        required: true
        description: "GitHub App private key for authentication"

jobs:
  setup-common:
    runs-on: ubuntu-latest
    outputs:
      author: ${{ steps.get-slack-id.outputs.author }}
      reviewers: ${{ steps.get-slack-id.outputs.reviewers }}
      reviewer: ${{ steps.get-slack-id.outputs.reviewer }}
      new_reviewer: ${{ steps.get-slack-id.outputs.new_reviewer }}
      escaped_title: ${{ steps.escaped-title.outputs.value }}
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: otimlabs/actions
          path: otimlabs-actions
          token: ${{ steps.bot_token.outputs.token }}

      - name: Get Slack User ID
        id: get-slack-id
        run: |
          MAPPING_FILE="otimlabs-actions/.github/workflows/github-slack-mapping.json"
          
          if [ "${{ github.event.action }}" = "submitted" ]; then
            REVIEWER=$(jq -r --arg user "${{ github.event.review.user.login }}" \
              'if has($user) then "<@" + .[$user] + ">" else $user end' \
              $MAPPING_FILE)
            echo "reviewer=$REVIEWER" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${{ github.event.action }}" = "review_requested" ]; then
            NEW_REVIEWER=$(jq -r --arg user "${{ github.event.requested_reviewer.login }}" \
              'if has($user) then "<@" + .[$user] + ">" else $user end' \
              $MAPPING_FILE)
            echo "new_reviewer=$NEW_REVIEWER" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Below only runs for opened/reopened events
          # Get author's Slack ID
          AUTHOR=$(jq -r --arg user "${{ github.event.pull_request.user.login }}" \
            'if has($user) then "<@" + .[$user] + ">" else $user end' \
            $MAPPING_FILE)
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT

          # Get all reviewers' Slack IDs
          REVIEWERS=$(echo '${{ toJSON(github.event.pull_request.requested_reviewers) }}' | \
            jq -r '.[].login | select(. != null)' | \
            while read -r reviewer; do
              SLACK_ID=$(jq -r --arg user "$reviewer" \
                'if has($user) then "<@" + .[$user] + ">" else $user end' \
                $MAPPING_FILE)
              echo "$SLACK_ID"
            done | paste -sd "," -)
          
          if [ -z "$REVIEWERS" ]; then
            REVIEWERS="None"
          fi
          
          echo "reviewers=$REVIEWERS" >> $GITHUB_OUTPUT

      - name: Set escaped title
        id: escaped-title
        run: |
          echo "value=$(echo '${{ github.event.pull_request.title }}' | sed 's/"/\\"/g' | sed 's/>/\\>/g')" >> $GITHUB_OUTPUT

  pr-initial-notification:
    needs: [setup-common]
    runs-on: ubuntu-latest
    if: (github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review') && !github.event.pull_request.draft
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Auto-assign PR to author
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: [context.payload.pull_request.user.login]
              });
            } catch (error) {
              console.log(`Could not assign PR to ${context.payload.pull_request.user.login} - they might be a bot or not have repository access`);
            }

      - name: Send initial Slack notification
        id: slack-notification
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Pull request ${{ github.event.action == 'ready_for_review' && 'ready for review' || github.event.action }} in `${{ github.event.repository.name }}`:\n<${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} ${{ needs.setup-common.outputs.escaped_title }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Author:* ${{ needs.setup-common.outputs.author }}\n*Reviewers:* ${{ needs.setup-common.outputs.reviewers || 'None' }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Store thread_ts
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Linked to Slack thread successfully\n<!-- SLACK_THREAD_TS:${{ steps.slack-notification.outputs.thread_ts }} -->`
            })

      - name: Send reviewer reminder
        if: toJSON(github.event.pull_request.requested_reviewers) == '[]' && steps.slack-notification.outputs.thread_ts != ''
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "thread_ts": "${{ steps.slack-notification.outputs.thread_ts }}",
              "text": "${{ needs.setup-common.outputs.author }}, please add reviewers to your PR"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  review-request:
    needs: [setup-common]
    runs-on: ubuntu-latest
    if: github.event.action == 'review_requested'
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get thread_ts for reviewer added
        id: get-thread-ts-reviewer
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const threadComment = comments.data.find(comment => 
              comment.body.includes('SLACK_THREAD_TS:')
            );
            if (threadComment) {
              const thread_ts = threadComment.body.match(/SLACK_THREAD_TS:(.*) -->/)[1].trim();
              core.setOutput('thread_ts', thread_ts);
            }

      - name: Check if re-review
        id: check-re-review
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const requestedReviewer = context.payload.requested_reviewer.login;
            const hasReviewedBefore = reviews.data.some(review => 
              review.user.login === requestedReviewer
            );
            
            core.setOutput('is_re_review', hasReviewedBefore);

      - name: Send reviewer added notification
        if: steps.get-thread-ts-reviewer.outputs.thread_ts != ''
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "thread_ts": "${{ steps.get-thread-ts-reviewer.outputs.thread_ts }}",
              "text": "${{ steps.check-re-review.outputs.is_re_review == 'true' && format('{0} has been asked to re-review', needs.setup-common.outputs.new_reviewer) || format('{0} has been added as a reviewer', needs.setup-common.outputs.new_reviewer) }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  review-submission:
    needs: [setup-common]
    runs-on: ubuntu-latest
    if: github.event.action == 'submitted' && (github.event.review.state == 'approved' || github.event.review.state == 'changes_requested')
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get thread_ts for review
        id: get-thread-ts-review
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const threadComment = comments.data.find(comment => 
              comment.body.includes('SLACK_THREAD_TS:')
            );
            if (threadComment) {
              const thread_ts = threadComment.body.match(/SLACK_THREAD_TS:(.*) -->/)[1].trim();
              core.setOutput('thread_ts', thread_ts);
            }

      - name: Send review notification
        if: steps.get-thread-ts-review.outputs.thread_ts != ''
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "thread_ts": "${{ steps.get-thread-ts-review.outputs.thread_ts }}",
              "text": "${{ github.event.review.state == 'approved' && '✅' || '🧱' }} ${{ github.event.review.user.login }} ${{ github.event.review.state == 'approved' && 'approved' || 'requested changes' }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  pr-close:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Get thread_ts for PR close
        id: get-thread-ts-close
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const threadComment = comments.data.find(comment => 
              comment.body.includes('SLACK_THREAD_TS:')
            );
            if (threadComment) {
              const thread_ts = threadComment.body.match(/SLACK_THREAD_TS:(.*) -->/)[1].trim();
              core.setOutput('thread_ts', thread_ts);
            }

      - name: Send PR state merge/close notification
        if: steps.get-thread-ts-close.outputs.thread_ts != ''
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "thread_ts": "${{ steps.get-thread-ts-close.outputs.thread_ts }}",
              "text": "${{ github.event.pull_request.merged == true && '🚢 PR has been merged!' || '❌ PR was closed without merging' }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Add reaction to main message
        if: steps.get-thread-ts-close.outputs.thread_ts != ''
        uses: slackapi/slack-github-action@fcfb566f8b0aab22203f066d80ca1d7e4b5d05b3 # v1.27.1
        with:
          channel-id: ${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}
          payload: |
            {
              "method": "reactions.add",
              "channel": "${{ secrets.SLACK_GITHUB_LOGS_CHANNEL_ID }}",
              "timestamp": "${{ steps.get-thread-ts-close.outputs.thread_ts }}",
              "name": "${{ github.event.pull_request.merged == true && 'ship' || 'x' }}"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  label-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || (github.event.action == 'edited' && github.event.changes.title))
    steps:
      - name: Generate GitHub App Token
        id: bot_token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Label PR based on title
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ steps.bot_token.outputs.token }}
          script: |
            const title = context.payload.pull_request.title;
            
            // Define label mappings
            const labelMappings = {
              'feat:': 'feature',
              'fix:': 'fix',
              'chore:': 'operations',
              'test:': 'test',
              'breaking-change:': 'breaking change',
              'docs:': 'documentation',
              'hot-fix:': 'hot-fix',
              'revert:': 'revert',
              'style:': 'style'
            };
            
            // Find matching prefix
            let labelToAdd = null;
            for (const [prefix, label] of Object.entries(labelMappings)) {
              if (title.toLowerCase().startsWith(prefix.toLowerCase())) {
                labelToAdd = label;
                break;
              }
            }
            
            if (!labelToAdd) {
              console.log('No semantic prefix found in PR title');
              return;
            }
            
            // Get current labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              ...context.repo,
              issue_number: context.issue.number
            });
            
            // Remove any existing semantic labels
            const semanticLabels = Object.values(labelMappings);
            for (const label of currentLabels) {
              if (semanticLabels.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: context.issue.number,
                  name: label.name
                }).catch(e => console.log(`Error removing label: ${e.message}`));
              }
            }
            
            // Add the new label
            await github.rest.issues.addLabels({
              ...context.repo,
              issue_number: context.issue.number,
              labels: [labelToAdd]
            });
            
            console.log(`Added label: ${labelToAdd}`);
